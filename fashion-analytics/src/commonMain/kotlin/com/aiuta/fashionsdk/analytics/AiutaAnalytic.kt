package com.aiuta.fashionsdk.analytics

import com.aiuta.fashionsdk.Aiuta
import com.aiuta.fashionsdk.analytics.events.AiutaAnalyticsEvent
import com.aiuta.fashionsdk.analytics.internal.AiutaAnalyticImpl
import kotlinx.coroutines.flow.Flow

/**
 * Extension property for accessing analytics functionality from an [Aiuta] instance.
 *
 * This property provides a convenient way to access the analytics system without
 * manually creating an [AiutaAnalytic] instance.
 *
 * ```kotlin
 * val aiuta = aiuta { /* configuration */ }
 *
 * // Collect analytics events
 * aiuta.analytic.analyticFlow.collect { event ->
 *     when (event) {
 *         is AiutaAnalyticsOnboardingEvent -> {
 *             // Handle onboarding event
 *         }
 *         is AiutaAnalyticsTryOnEvent -> {
 *             // Handle try-on event
 *         }
 *         // Handle other events...
 *     }
 * }
 * ```
 *
 * @return [AiutaAnalytic] instance configured for this [Aiuta] instance
 *
 * @see AiutaAnalytic
 * @see AiutaAnalyticsEvent
 */
public val Aiuta.analytic: AiutaAnalytic
    get() = AiutaAnalyticImpl.create(aiuta = this)

/**
 * Public interface for receiving analytics events from the Aiuta SDK.
 *
 * This interface provides access to a stream of analytics events that are generated
 * internally by the SDK during various operations such as try-on sessions, user
 * interactions, and system events.
 *
 * The analytics system allows you to:
 * - Track user behavior and engagement
 * - Implement custom analytics and reporting
 * - Debug and troubleshoot SDK operations
 *
 * ```kotlin
 * val aiuta = aiuta { /* configuration */ }
 * val analytics = aiuta.analytic
 *
 * // Launch collecting analytics events
 * aiuta.analytic.analyticFlow.collect { event ->
 *     when (event) {
 *         is AiutaAnalyticsOnboardingEvent -> {
 *             // Handle onboarding event
 *         }
 *         is AiutaAnalyticsTryOnEvent -> {
 *             // Handle try-on event
 *         }
 *         // Handle other events...
 *     }
 * }
 * ```
 *
 * @see AiutaAnalyticsEvent
 * @see Aiuta.analytic
 */
public interface AiutaAnalytic {
    /**
     * Flow of analytics events generated by the SDK.
     *
     * This flow emits [AiutaAnalyticsEvent] instances whenever significant
     * events occur within the SDK. The flow is cold, meaning events are only
     * emitted when there are active collectors.
     *
     * ```kotlin
     * aiuta.analytic.analyticFlow
     *     .onEach { event ->
     *         // Process each analytics event
     *         when (event) {
     *             is AiutaAnalyticsOnboardingEvent -> {
     *                 // Handle onboarding event
     *             }
     *             is AiutaAnalyticsTryOnEvent -> {
     *                 // Handle try-on event
     *             }
     *             // Handle other events...
     *         }
     *     }
     *     .launchIn(scope)
     * ```
     * @return Cold [Flow] of [AiutaAnalyticsEvent]
     *
     * @see AiutaAnalyticsEvent
     */
    public val analyticFlow: Flow<AiutaAnalyticsEvent>
}
